basePath: /
definitions:
  models.LoginRequest:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  models.Person:
    properties:
      age:
        maximum: 130
        minimum: 1
        type: integer
      email:
        type: string
      firstname:
        type: string
      id:
        type: integer
      lastname:
        type: string
    required:
    - email
    - firstname
    - lastname
    type: object
  models.Video:
    properties:
      author:
        $ref: '#/definitions/models.Person'
      description:
        maxLength: 200
        type: string
      id:
        type: integer
      title:
        maxLength: 100
        minLength: 2
        type: string
      url:
        type: string
    required:
    - author
    - url
    type: object
host: localhost:8000
info:
  contact:
    email: sntshkmr60@gmail.com
    name: Santosh Kumar
    url: https://twitter.com/sntshk
  description: A book management service API in Go using Gin framework.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: https://tos.santoshk.dev
  title: Gin Book Service
  version: "1.0"
paths:
  /auth/videos:
    get:
      description: Takes nothing. Return list of videos.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Video'
            type: array
      security:
      - JWT: []
      summary: Return all videos
      tags:
      - videos
    post:
      description: Takes a video JSON and save it in DB. Return saved JSON.
      parameters:
      - description: Video JSON
        in: body
        name: video
        required: true
        schema:
          $ref: '#/definitions/models.Video'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Video'
      security:
      - JWT: []
      summary: Save a new video
      tags:
      - videos
  /auth/videos/{id}:
    delete:
      description: Takes a video id and detele it in DB. Return nothing.
      parameters:
      - description: VideoId
        in: path
        name: uint
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Video'
      summary: Delete an existing video
      tags:
      - videos
    put:
      description: Takes a video JSON and video id and update it in DB. Return saved
        JSON.
      parameters:
      - description: VideoId
        in: path
        name: uint
        required: true
        type: integer
      - description: Video JSON
        in: body
        name: video
        required: true
        schema:
          $ref: '#/definitions/models.Video'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Video'
      summary: Update an existing video
      tags:
      - videos
  /login:
    post:
      description: Takes nothing. Return list of videos.
      parameters:
      - description: Login JSON
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/models.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: object
      summary: Login by username and password
      tags:
      - login
  /ping:
    get:
      description: Return poing if server is fine.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: object
      summary: Ping the API
      tags:
      - ping
securityDefinitions:
  JWT:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
